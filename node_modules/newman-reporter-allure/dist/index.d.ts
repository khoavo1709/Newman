/// <reference types="node" />
import type { EventEmitter } from "events";
import type { ConsoleEvent, Cursor, NewmanRunExecutionAssertion } from "newman";
import type { Collection, CollectionDefinition, Event, HeaderList, Item, Request, RequestBody, Response } from "postman-collection";
import { AllureGroup, AllureRuntime, AllureStep, AllureTest, InMemoryAllureWriter, Status, StatusDetails } from "allure-js-commons";
interface AllureOptions {
    export: string;
    postProcessorForTest?: any;
    collectionAsParentSuite?: boolean;
}
interface PmItem {
    name: string;
    passed: boolean;
    failedAssertions: string[];
    requestError?: string;
    consoleLogs: string[];
    requestData?: PmRequestData;
    responseData?: PmResponseData;
    prerequest?: string;
    testScript?: string;
}
interface PmRequestData {
    url: string;
    method: string;
    body?: RequestBody;
    headers?: HeaderList;
}
interface PmResponseData {
    status: string;
    code: number;
    body: string;
    headers?: HeaderList;
}
interface RunningItem {
    name: string;
    allureTest: AllureTest;
    pmItem: PmItem;
    steps: AllureStep[];
}
declare class AllureReporter {
    suites: AllureGroup[];
    runningItems: RunningItem[];
    currentNMGroup: Collection;
    allureRuntime: AllureRuntime;
    reporterOptions: AllureOptions;
    options: {
        collection: CollectionDefinition;
    };
    allureWriter?: InMemoryAllureWriter;
    constructor(emitter: EventEmitter, reporterOptions: AllureOptions, options: {
        collection: CollectionDefinition;
    });
    get currentSuite(): AllureGroup | null;
    get currentStep(): AllureStep | null | undefined;
    get currentRunningItem(): RunningItem | null;
    get currentExecutable(): AllureTest;
    get currentTest(): AllureTest;
    set currentTest(allureTest: AllureTest);
    pathToItem(item: Item): string[];
    getFullName(item: Item): string;
    attachString(name: string, value: string | string[]): void;
    setDescriptionHtml(html: string): void;
    endTest(allureTest: AllureTest, status: Status, details?: StatusDetails): void;
    startStep(name: string): AllureStep;
    endStep(status: Status): void;
    headerListToJsonString(headers: HeaderList): string;
    escape(val: string): string;
    registerEvents(emitter: EventEmitter): void;
    onStart(_err: any, _args: any): void;
    onPrerequest(_err: any, args: {
        executions: Event[];
    }): void;
    onBeforeItem(_err: any, args: {
        item: Item;
        cursor: Cursor;
    }): void;
    onItem(_err: any, args: {
        item: Item;
    }): void;
    onTest(_err: any, args: {
        executions: Event[];
    }): void;
    onConsole(err: any, args: ConsoleEvent): void;
    onRequest(err: any, args: {
        request: Request;
        response: Response;
    }): void;
    onAssertion(err: any, args: NewmanRunExecutionAssertion): void;
    onDone(_err: any, _args: unknown): void;
}
export = AllureReporter;
