"use strict";
const allure_js_commons_1 = require("allure-js-commons");
const helpers_1 = require("./helpers");
class AllureReporter {
    constructor(emitter, reporterOptions, options) {
        this.suites = [];
        this.runningItems = [];
        this.currentNMGroup = options.collection;
        this.allureWriter = reporterOptions.postProcessorForTest ? new allure_js_commons_1.InMemoryAllureWriter() : undefined;
        this.allureRuntime = new allure_js_commons_1.AllureRuntime({
            resultsDir: reporterOptions.export || "allure-results",
            writer: this.allureWriter,
        });
        this.reporterOptions = reporterOptions;
        this.options = options;
        this.registerEvents(emitter);
    }
    get currentSuite() {
        const lastIndex = this.suites.length - 1;
        if (lastIndex >= 0) {
            return this.suites[lastIndex];
        }
        else {
            return null;
        }
    }
    get currentStep() {
        var _a, _b, _c;
        const lastIndex = (((_b = (_a = this.currentRunningItem) === null || _a === void 0 ? void 0 : _a.steps) === null || _b === void 0 ? void 0 : _b.length) || 0) - 1;
        if (lastIndex >= 0) {
            return (_c = this.currentRunningItem) === null || _c === void 0 ? void 0 : _c.steps[lastIndex];
        }
        else {
            return null;
        }
    }
    get currentRunningItem() {
        const lastIndex = this.runningItems.length - 1;
        if (lastIndex >= 0) {
            return this.runningItems[lastIndex];
        }
        else {
            return null;
        }
    }
    get currentExecutable() {
        const executable = this.currentTest;
        if (!executable) {
            throw new Error("No executable!");
        }
        return executable;
    }
    get currentTest() {
        const currentItem = this.currentRunningItem;
        if (!currentItem) {
            throw new Error("No active test");
        }
        return currentItem.allureTest;
    }
    set currentTest(allureTest) {
        if (!this.currentRunningItem) {
            throw new Error("Cannot find current test");
        }
        this.currentRunningItem.allureTest = allureTest;
    }
    pathToItem(item) {
        if (!item || !(typeof item.parent === "function") || !(typeof item.forEachParent === "function")) {
            return [];
        }
        const chain = [];
        if (this.options.collection.name && this.reporterOptions.collectionAsParentSuite) {
            chain.push(this.options.collection.name);
        }
        item.forEachParent((parent) => {
            chain.unshift(parent.name || parent.id);
        });
        return chain;
    }
    getFullName(item) {
        const chain = this.pathToItem(item);
        return `${chain.join("/")}#${item.name}`;
    }
    attachString(name, value) {
        const stringToAttach = Array.isArray(value) ? value.join("\n") : value;
        if (stringToAttach) {
            const buf = Buffer.from(stringToAttach, "utf8");
            const file = this.allureRuntime.writeAttachment(buf, allure_js_commons_1.ContentType.TEXT);
            this.currentTest.addAttachment(name, allure_js_commons_1.ContentType.TEXT, file);
        }
    }
    setDescriptionHtml(html) {
        if (html) {
            this.currentExecutable.descriptionHtml = html;
        }
    }
    endTest(allureTest, status, details) {
        if (details) {
            allureTest.statusDetails = details;
        }
        allureTest.status = status;
        allureTest.stage = allure_js_commons_1.Stage.FINISHED;
        allureTest.endTest();
    }
    startStep(name) {
        var _a;
        const allureStep = this.currentExecutable.startStep(name);
        (_a = this.currentRunningItem) === null || _a === void 0 ? void 0 : _a.steps.push(allureStep);
        return allureStep;
    }
    endStep(status) {
        var _a;
        const step = (_a = this.currentRunningItem) === null || _a === void 0 ? void 0 : _a.steps.pop();
        if (!step) {
            throw new Error("Step not found");
        }
        step.status = status;
        step.endStep();
    }
    headerListToJsonString(headers) {
        const ret = {};
        headers.all().forEach((h) => {
            ret[h.key] = h.value;
        });
        return JSON.stringify(ret, null, 4);
    }
    escape(val) {
        return (val
            .replace("\n", "")
            .replace("\r", "")
            .replace('"', '"'));
    }
    registerEvents(emitter) {
        emitter.on("start", this.onStart.bind(this));
        emitter.on("beforeItem", this.onBeforeItem.bind(this));
        emitter.on("item", this.onItem.bind(this));
        emitter.on("prerequest", this.onPrerequest.bind(this));
        emitter.on("request", this.onRequest.bind(this));
        emitter.on("test", this.onTest.bind(this));
        emitter.on("assertion", this.onAssertion.bind(this));
        emitter.on("console", this.onConsole.bind(this));
        emitter.on("done", this.onDone.bind(this));
    }
    onStart(_err, _args) {
        const suiteName = this.options.collection.name;
        const scope = this.currentSuite || this.allureRuntime;
        const suite = scope.startGroup(suiteName || "Global");
        this.suites.push(suite);
        this.runningItems = [];
    }
    onPrerequest(_err, args) {
        var _a, _b;
        const execScript = (_b = (_a = args.executions[0]) === null || _a === void 0 ? void 0 : _a.script.exec) === null || _b === void 0 ? void 0 : _b.join("\n");
        if (this.currentRunningItem && execScript) {
            this.currentRunningItem.pmItem.prerequest = execScript;
        }
    }
    onBeforeItem(_err, args) {
        const pmItem = {
            name: args.item.name,
            passed: true,
            failedAssertions: [],
            consoleLogs: [],
        };
        if (this.currentSuite === null) {
            throw new Error("No active suite");
        }
        const testName = pmItem.name;
        const allureTest = this.currentSuite.startTest(testName);
        allureTest.stage = allure_js_commons_1.Stage.RUNNING;
        const itemGroup = args.item.parent();
        const item = args.item;
        const fullName = this.getFullName(item);
        if (itemGroup && this.currentNMGroup !== itemGroup) {
            this.currentNMGroup = itemGroup;
        }
        const testPath = this.pathToItem(item);
        if (testPath[0]) {
            allureTest.addLabel(allure_js_commons_1.LabelName.PARENT_SUITE, testPath[0]);
        }
        if (testPath[1]) {
            allureTest.addLabel(allure_js_commons_1.LabelName.SUITE, testPath[1]);
        }
        const subSuites = testPath.slice(2);
        if (subSuites.length) {
            allureTest.addLabel(allure_js_commons_1.LabelName.SUB_SUITE, subSuites.join(" > "));
        }
        allureTest.fullName = fullName;
        allureTest.testCaseId = (0, allure_js_commons_1.md5)(fullName);
        const { labels } = (0, helpers_1.extractMeta)(args.item.events);
        labels.forEach((label) => {
            allureTest.addLabel(label.name, label.value);
        });
        this.runningItems.push({
            name: fullName,
            allureTest: allureTest,
            pmItem: pmItem,
            steps: [],
        });
    }
    onItem(_err, args) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if ((_a = this.currentRunningItem) === null || _a === void 0 ? void 0 : _a.pmItem.prerequest) {
            this.attachString("PreRequest", this.currentRunningItem.pmItem.prerequest);
        }
        if ((_b = this.currentRunningItem) === null || _b === void 0 ? void 0 : _b.pmItem.testScript) {
            this.attachString("TestScript", this.currentRunningItem.pmItem.testScript);
        }
        if ((_c = this.currentRunningItem) === null || _c === void 0 ? void 0 : _c.pmItem.consoleLogs.length) {
            this.attachString("ConsoleLogs", this.currentRunningItem.pmItem.consoleLogs);
        }
        const requestData = (_d = this.currentRunningItem) === null || _d === void 0 ? void 0 : _d.pmItem.requestData;
        const requestDataURL = requestData && `${requestData.method} - ${requestData.url}`;
        if ((requestData === null || requestData === void 0 ? void 0 : requestData.headers) && ((_e = requestData === null || requestData === void 0 ? void 0 : requestData.headers) === null || _e === void 0 ? void 0 : _e.count()) > 0) {
            const attachment = this.allureRuntime.writeAttachment(this.headerListToJsonString(requestData.headers), {
                contentType: allure_js_commons_1.ContentType.JSON,
            });
            this.currentExecutable.addAttachment("Request Headers", { contentType: allure_js_commons_1.ContentType.JSON }, attachment);
        }
        if (((_f = requestData === null || requestData === void 0 ? void 0 : requestData.body) === null || _f === void 0 ? void 0 : _f.mode) === "raw" && requestData.body.raw) {
            const attachment = this.allureRuntime.writeAttachment(requestData.body.raw, {
                contentType: allure_js_commons_1.ContentType.TEXT,
            });
            this.currentExecutable.addAttachment("Request Body", { contentType: allure_js_commons_1.ContentType.TEXT }, attachment);
        }
        let testDescription = "";
        const rawDescription = args.item.request.description;
        if (rawDescription !== undefined) {
            if (typeof rawDescription === "string") {
                testDescription = rawDescription || "";
            }
            else {
                testDescription = rawDescription.content || "";
            }
            testDescription = testDescription.replace(/[*]/g, "");
            testDescription = testDescription.replace(/\n/g, "<br>");
        }
        if (requestDataURL) {
            this.currentExecutable.parameter("Request", requestDataURL);
        }
        const response = (_g = this.currentRunningItem) === null || _g === void 0 ? void 0 : _g.pmItem.responseData;
        if (response === null || response === void 0 ? void 0 : response.code) {
            this.currentExecutable.parameter("Response Code", response === null || response === void 0 ? void 0 : response.code.toString(), {
                excluded: true,
            });
        }
        if (testDescription) {
            this.setDescriptionHtml(testDescription);
        }
        if ((response === null || response === void 0 ? void 0 : response.headers) && ((_h = response === null || response === void 0 ? void 0 : response.headers) === null || _h === void 0 ? void 0 : _h.count()) > 0) {
            const attachment = this.allureRuntime.writeAttachment(this.headerListToJsonString(response.headers), {
                contentType: allure_js_commons_1.ContentType.JSON,
            });
            this.currentExecutable.addAttachment("Response Headers", { contentType: allure_js_commons_1.ContentType.JSON }, attachment);
        }
        if (response === null || response === void 0 ? void 0 : response.body) {
            const attachment = this.allureRuntime.writeAttachment(response.body, {
                contentType: allure_js_commons_1.ContentType.TEXT,
            });
            this.currentExecutable.addAttachment("Response Body", { contentType: allure_js_commons_1.ContentType.TEXT }, attachment);
        }
        const failedAssertions = (_j = this.currentRunningItem) === null || _j === void 0 ? void 0 : _j.pmItem.failedAssertions;
        const requestError = (_k = this.currentRunningItem) === null || _k === void 0 ? void 0 : _k.pmItem.requestError;
        if (response && (failedAssertions === null || failedAssertions === void 0 ? void 0 : failedAssertions.length)) {
            const msg = this.escape(failedAssertions.join(", "));
            const details = this.escape(`Response code: ${response.code}, status: ${response.status}`);
            const error = {
                name: "AssertionError",
                message: msg,
                trace: details,
            };
            const latestStatus = (_l = this.currentRunningItem) === null || _l === void 0 ? void 0 : _l.allureTest.status;
            if (latestStatus === allure_js_commons_1.Status.FAILED || latestStatus === allure_js_commons_1.Status.BROKEN) {
                return;
            }
            const status = error.name === "AssertionError" ? allure_js_commons_1.Status.FAILED : allure_js_commons_1.Status.BROKEN;
            if (this.currentRunningItem) {
                this.endTest(this.currentRunningItem.allureTest, status, { message: error.message });
            }
        }
        else if (requestError) {
            const errorMsg = this.escape(requestError);
            if (this.currentRunningItem) {
                this.endTest((_m = this.currentRunningItem) === null || _m === void 0 ? void 0 : _m.allureTest, allure_js_commons_1.Status.BROKEN, { message: errorMsg });
            }
        }
        else if (this.currentRunningItem) {
            this.endTest((_o = this.currentRunningItem) === null || _o === void 0 ? void 0 : _o.allureTest, allure_js_commons_1.Status.PASSED);
        }
        this.runningItems.pop();
    }
    onTest(_err, args) {
        var _a, _b;
        const execScript = (_b = (_a = args.executions[0]) === null || _a === void 0 ? void 0 : _a.script.exec) === null || _b === void 0 ? void 0 : _b.join("\n");
        if (this.currentRunningItem && execScript) {
            this.currentRunningItem.pmItem.testScript = execScript;
            const testArgs = args.executions[0];
            if (testArgs.error) {
                const errName = testArgs.error.name;
                const errMsg = testArgs.error.message;
                const currStep = this.startStep(errName);
                currStep.detailsMessage = errMsg;
                currStep.status = allure_js_commons_1.Status.FAILED;
                currStep.stage = allure_js_commons_1.Stage.FINISHED;
                this.currentRunningItem.pmItem.failedAssertions.push(errName);
                currStep.endStep();
            }
        }
    }
    onConsole(err, args) {
        var _a;
        if (err) {
            return;
        }
        if (args.level) {
            (_a = this.currentRunningItem) === null || _a === void 0 ? void 0 : _a.pmItem.consoleLogs.push(`level: ${args.level}, messages: ${args.messages.toString()}`);
        }
    }
    onRequest(err, args) {
        const req = args.request;
        const url = `${req.url.protocol || ""}://${args.request.url.getHost()}${req.url.getPathWithQuery()}`;
        this.runningItems[this.runningItems.length - 1].pmItem.requestData = {
            url: url,
            method: req.method,
            body: req.body,
            headers: req.headers,
        };
        if (err) {
            if (this.currentRunningItem) {
                this.currentRunningItem.pmItem.passed = false;
                this.currentRunningItem.pmItem.requestError = err.message;
            }
            return;
        }
        const respStream = args.response.stream;
        const respBody = (respStream && Buffer.from(respStream).toString()) || "";
        this.runningItems[this.runningItems.length - 1].pmItem.responseData = {
            status: args.response.status,
            code: args.response.code,
            body: respBody,
            headers: args.response.headers,
        };
    }
    onAssertion(err, args) {
        const stepName = args.assertion;
        const currStep = this.startStep(stepName);
        if (err && this.currentRunningItem) {
            this.currentRunningItem.pmItem.passed = false;
            this.currentRunningItem.pmItem.failedAssertions.push(args.assertion);
            currStep.detailsMessage = args.error.message;
            currStep.detailsTrace = args.error.stack;
            currStep.status = allure_js_commons_1.Status.FAILED;
            currStep.stage = allure_js_commons_1.Stage.FINISHED;
        }
        else {
            currStep.stage = allure_js_commons_1.Stage.FINISHED;
            currStep.status = allure_js_commons_1.Status.PASSED;
        }
        currStep.endStep();
    }
    onDone(_err, _args) {
        if (this.currentSuite) {
            this.currentSuite.endGroup();
            this.suites.pop();
        }
        if (this.reporterOptions.postProcessorForTest) {
            this.reporterOptions.postProcessorForTest(this.allureWriter);
        }
    }
}
module.exports = AllureReporter;
//# sourceMappingURL=index.js.map